diff --git a/configure.ac b/configure.ac
index 30be6c18..f6f0e377 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1213,6 +1213,7 @@ AC_RUN_IFELSE([AC_LANG_PROGRAM([[ #include <stdio.h> ]], [[ exit(0); ]])],
 dnl Checks for header files.
 # Checks for libraries.
 AC_CHECK_FUNC([setsockopt], , [AC_CHECK_LIB([socket], [setsockopt])])
+AC_CHECK_FUNC([yp_match], , [AC_CHECK_LIB([nsl], [yp_match])])
 
 dnl IRIX and Solaris 2.5.1 have dirname() in libgen
 AC_CHECK_FUNCS([dirname], [AC_CHECK_HEADERS([libgen.h])] , [
@@ -1494,6 +1495,61 @@ else
 	AC_MSG_RESULT([no])
 fi
 
+# Check whether user wants TCP wrappers support
+TCPW_MSG="no"
+AC_ARG_WITH([tcp-wrappers],
+   [  --with-tcp-wrappers[[=PATH]] Enable tcpwrappers support (optionally in PATH)],
+   [
+       if test "x$withval" != "xno" ; then
+           saved_LIBS="$LIBS"
+           saved_LDFLAGS="$LDFLAGS"
+           saved_CPPFLAGS="$CPPFLAGS"
+           if test -n "${withval}" && \
+               test "x${withval}" != "xyes"; then
+               if test -d "${withval}/lib"; then
+                   if test -n "${need_dash_r}"; then
+                       LDFLAGS="-L${withval}/lib -R${withval}/lib ${LDFLAGS}"
+                   else
+                       LDFLAGS="-L${withval}/lib ${LDFLAGS}"
+                   fi
+               else
+                   if test -n "${need_dash_r}"; then
+                       LDFLAGS="-L${withval} -R${withval} ${LDFLAGS}"
+                   else
+                       LDFLAGS="-L${withval} ${LDFLAGS}"
+                   fi
+               fi
+               if test -d "${withval}/include"; then
+                   CPPFLAGS="-I${withval}/include ${CPPFLAGS}"
+               else
+                   CPPFLAGS="-I${withval} ${CPPFLAGS}"
+               fi
+           fi
+           LIBS="-lwrap $LIBS"
+           AC_MSG_CHECKING([for libwrap])
+           AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <tcpd.h>
+int deny_severity = 0, allow_severity = 0;
+               ]], [[
+   hosts_access(0);
+               ]])], [
+                   AC_MSG_RESULT([yes])
+                   AC_DEFINE([LIBWRAP], [1],
+                       [Define if you want
+                       TCP Wrappers support])
+                   SSHDLIBS="$SSHDLIBS -lwrap"
+                   TCPW_MSG="yes"
+               ], [
+                   AC_MSG_ERROR([*** libwrap missing])
+           ])
+           LIBS="$saved_LIBS"
+       fi
+   ]
+)
+
 # Check whether user wants to use ldns
 LDNS_MSG="no"
 AC_ARG_WITH(ldns,
@@ -5245,6 +5301,7 @@ echo "                       PAM support: $PAM_MSG"
 echo "                   OSF SIA support: $SIA_MSG"
 echo "                 KerberosV support: $KRB5_MSG"
 echo "                   SELinux support: $SELINUX_MSG"
+echo "              TCP Wrappers support: $TCPW_MSG"
 echo "              MD5 password support: $MD5_MSG"
 echo "                   libedit support: $LIBEDIT_MSG"
 echo "                   libldns support: $LDNS_MSG"
diff --git a/sshd.8 b/sshd.8
index fb133c14..55735f3c 100644
--- a/sshd.8
+++ b/sshd.8
@@ -873,6 +873,12 @@ the user's home directory becomes accessible.
 This file should be writable only by the user, and need not be
 readable by anyone else.
 .Pp
+.It Pa /etc/hosts.allow
+.It Pa /etc/hosts.deny
+Access controls that should be enforced by tcp-wrappers are defined here.
+Further details described in
+.Xr hosts_access 5 .
+.Pp
 .It Pa /etc/hosts.equiv
 This file is for host-based authentication (see
 .Xr ssh 1 ) .
@@ -975,6 +981,7 @@ The content of this file is not sensitive; it can be world-readable.
 .Xr ssh-keygen 1 ,
 .Xr ssh-keyscan 1 ,
 .Xr chroot 2 ,
+.Xr hosts_access 5 ,
 .Xr login.conf 5 ,
 .Xr moduli 5 ,
 .Xr sshd_config 5 ,
diff --git a/sshd.c b/sshd.c
index cbd3bce9..9111e67d 100644
--- a/sshd.c
+++ b/sshd.c
@@ -123,6 +123,13 @@
 #include "version.h"
 #include "ssherr.h"
 
+#ifdef LIBWRAP
+#include <tcpd.h>
+#include <syslog.h>
+int allow_severity;
+int deny_severity;
+#endif /* LIBWRAP */
+
 /* Re-exec fds */
 #define REEXEC_DEVCRYPTO_RESERVED_FD	(STDERR_FILENO + 1)
 #define REEXEC_STARTUP_PIPE_FD		(STDERR_FILENO + 2)
@@ -2053,6 +2060,23 @@ main(int ac, char **av)
 	audit_connection_from(remote_ip, remote_port);
 #endif
 
+#ifdef LIBWRAP
+	allow_severity = options.log_facility|LOG_INFO;
+	deny_severity = options.log_facility|LOG_WARNING;
+	/* Check whether logins are denied from this host. */
+	if (ssh_packet_connection_is_on_socket(ssh)) {
+		struct request_info req;
+		request_init(&req, RQ_DAEMON, __progname, RQ_FILE, sock_in, 0);
+		fromhost(&req);
+		if (!hosts_access(&req)) {
+			debug("Connection refused by tcp wrapper");
+			refuse(&req);
+			/* NOTREACHED */
+		        fatal("libwrap refuse returns");
+	         }
+	}
+#endif /* LIBWRAP */
+
 	rdomain = ssh_packet_rdomain_in(ssh);
 
 	/* Log the connection. */
